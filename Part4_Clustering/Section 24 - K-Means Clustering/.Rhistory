geom_point(colour="blue",shape=15,size=6)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border= element_blank())+
labs(title="Tillage (obs.)")+
theme(plot.title=element_text(family="Times New Roman",size=24,color="black",hjust=-0.25))+
theme(axis.text=element_text(family="Times New Roman",size=20,color="black"))+
theme(axis.title=element_text(family="Times New Roman",size=24,color="black"))+
theme(axis.ticks.y=element_blank())+
theme(plot.margin=margin(t=5,b=5,unit="mm"))+
theme(plot.margin=unit(c(5,10,5,0),"mm"))+
coord_flip()+
geom_hline(yintercept=0,lty=2)+
geom_vline(xintercept=0.4,lty=1,size=1)+
geom_vline(xintercept=3.6,lty=1,size=1)+
ylab(xlab)+
xlab(ylab)
return(p)
}
plot(subdata)
subdata<-subset(yieldnew,Type=="Soil")
subdata$class<-factor(subdata$class, levels=rev(subdata$class))
plot<-function(subdata,xlab="Effect size of yield",ylab=""){
require(ggplot2)
p<-ggplot(subdata,aes(x=class,y=mean1,group=class))+
geom_errorbar(aes(ymin=UL1,ymax=LL1),width=0.1,colour="red",size=1)+
geom_point(colour="blue",shape=15,size=6)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border= element_blank())+
labs(title="Soil Texture (obs.)")+
theme(plot.title=element_text(family="Times New Roman",size=24,color="black",hjust=-0.65))+
theme(axis.text=element_text(family="Times New Roman",size=20,color="black"))+
theme(axis.title=element_text(family="Times New Roman",size=24,color="black"))+
theme(axis.ticks.y=element_blank())+
theme(plot.margin=margin(t=5,b=5,unit="mm"))+
theme(plot.margin=unit(c(5,10,5,0),"mm"))+
coord_flip()+
geom_hline(yintercept=0,lty=2)+
geom_vline(xintercept=0.4,lty=1,size=1)+
geom_vline(xintercept=7.6,lty=1,size=1)+
ylab(xlab)+
xlab(ylab)
return(p)
}
plot(subdata)
plot<-function(subdata,xlab="Effect size of yield",ylab=""){
require(ggplot2)
p<-ggplot(subdata,aes(x=class,y=mean1,group=class))+
geom_errorbar(aes(ymin=UL1,ymax=LL1),width=0.1,colour="red",size=1)+
geom_point(colour="blue",shape=15,size=6)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border= element_blank())+
labs(title="Soil Texture (obs.)")+
theme(plot.title=element_text(family="Times New Roman",size=24,color="black",hjust=-0.85))+
theme(axis.text=element_text(family="Times New Roman",size=20,color="black"))+
theme(axis.title=element_text(family="Times New Roman",size=24,color="black"))+
theme(axis.ticks.y=element_blank())+
theme(plot.margin=margin(t=5,b=5,unit="mm"))+
theme(plot.margin=unit(c(5,10,5,0),"mm"))+
coord_flip()+
geom_hline(yintercept=0,lty=2)+
geom_vline(xintercept=0.4,lty=1,size=1)+
geom_vline(xintercept=7.6,lty=1,size=1)+
ylab(xlab)+
xlab(ylab)
return(p)
}
plot(subdata)
subdata<-subset(yieldnew,Type=="Plant")
subdata$class<-factor(subdata$class, levels=rev(subdata$class))
plot<-function(subdata,xlab="Effect size of yield",ylab=""){
require(ggplot2)
p<-ggplot(subdata,aes(x=class,y=mean1,group=class))+
geom_errorbar(aes(ymin=UL1,ymax=LL1),width=0.1,colour="red",size=1)+
geom_point(colour="blue",shape=15,size=6)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border= element_blank())+
labs(title="Crop Type (obs.)")+
theme(plot.title=element_text(family="Times New Roman",size=24,color="black",hjust=-0.65))+
theme(axis.text=element_text(family="Times New Roman",size=20,color="black"))+
theme(axis.title=element_text(family="Times New Roman",size=24,color="black"))+
theme(axis.ticks.y=element_blank())+
theme(plot.margin=margin(t=5,b=5,unit="mm"))+
theme(plot.margin=unit(c(5,10,5,0),"mm"))+
coord_flip()+
geom_hline(yintercept=0,lty=2)+
geom_vline(xintercept=0.4,lty=1,size=1)+
geom_vline(xintercept=10.6,lty=1,size=1)+
ylab(xlab)+
xlab(ylab)
return(p)
}
plot(subdata)
plot<-function(subdata,xlab="Effect size of yield",ylab=""){
require(ggplot2)
p<-ggplot(subdata,aes(x=class,y=mean1,group=class))+
geom_errorbar(aes(ymin=UL1,ymax=LL1),width=0.1,colour="red",size=1)+
geom_point(colour="blue",shape=15,size=6)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border= element_blank())+
labs(title="Crop Type (obs.)")+
theme(plot.title=element_text(family="Times New Roman",size=24,color="black",hjust=-0.95))+
theme(axis.text=element_text(family="Times New Roman",size=20,color="black"))+
theme(axis.title=element_text(family="Times New Roman",size=24,color="black"))+
theme(axis.ticks.y=element_blank())+
theme(plot.margin=margin(t=5,b=5,unit="mm"))+
theme(plot.margin=unit(c(5,10,5,0),"mm"))+
coord_flip()+
geom_hline(yintercept=0,lty=2)+
geom_vline(xintercept=0.4,lty=1,size=1)+
geom_vline(xintercept=10.6,lty=1,size=1)+
ylab(xlab)+
xlab(ylab)
return(p)
}
plot(subdata)
library(metafor)
library(ggplot2)
library(extrafont)
font_import()
fonts()
yield<-read.csv("/Volumes/Untitled/meta analysis/yield/analysis for article/yield.csv",header=T)
#moderator analysis for soil texture#
yieldtext<-yield[yield$Texture!="",]
metatexture<-rma(data=yieldtext,yi=ES,vi=Var,mods=~factor(Texture)-1)
metatexture
#moderator analysis for soil pH (not good,use regression result)#
yieldph<-yield[yield$pH!="",]
metaph<-rma(data=yieldph,yi=ES,vi=Var,mods=~factor(pH)-1)
metaph
#moderator analysis for crop #
yieldcrop<-yield[yield$Crop!="",]
metacrop<-rma(data=yieldcrop,yi=ES,vi=Var,mods=~factor(Crop)-1)
metacrop
#moderator analysis for tillage #
yieldtill<-yield[yield$Tillage!="",]
metatillage<-rma(data=yieldtill,yi=ES,vi=Var,mods=~factor(Tillage)-1)
metatillage
#moderator analysis for PL application time #
yieldtime<-yield[yield$Time!="",]
metatime<-rma(data=yieldtime,yi=ES,vi=Var,mods=~factor(Time)-1)
metatime
yieldtime1<-yieldtime[yieldtime$Time!="residual",]
yieldtime2<-yieldtime1[yieldtime1$Time!="AS",]
metatimenew<-rma(data=yieldtime2,yi=ES,vi=Var,mods=~factor(Time)-1)
metatimenew
#moderator analysis for PL application method #
yieldmeth<-yield[yield$Method!="",]
metamethod<-rma(data=yieldmeth,yi=ES,vi=Var,mods=~factor(Method)-1)
metamethod
dataset = read.csv(/Users/yaru/Dropbox/DataScience/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing)
dataset = read.csv('/Users/yaru/Dropbox/DataScience/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing')
dataset = read.csv('/Users/yaru/Dropbox/DataScience/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Data.csv')
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, Fun = function(x)mean(x,na.rm=TRUE)),
dataset$Age)
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, Fun = function(x) mean(x,na.rm=TRUE)),
dataset$Age)
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, Fun = function(x) mean(x, na.rm=TRUE)),
dataset$Age)
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm=TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm=TRUE)),
dataset$Salary)
View(dataset)
dataset$Country = factor(dataset$Country,
levels = c('France','Spain','Germany'),
labels = c(1,2,3))
View(dataset)
View(dataset)
dataset$Purchased = factor(dataset$Purchased,
levels = c('No','Yes'),
labels = c(0,1))
View(dataset)
View(dataset)
install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased,SplitRatio = 0.8)
split
training_set = subset(dataset,split==TRUE)
test_set = subset(dataset,split==FALSE)
View(test_set)
View(test_set)
View(training_set)
traning_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
training_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
View(test_set)
View(test_set)
View(training_set)
View(training_set)
dataset = read.csv('Salary_Date.csv')
dataset = read.csv('/Users/yaru/Dropbox/DataScience/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 4 - Simple Linear Regression/Salary_Date.csv')
library(readr)
Salary_Data <- read_csv("~/Dropbox/DataScience/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 4 - Simple Linear Regression/Salary_Data.csv")
View(Salary_Data)
dataset = read.csv("~/Dropbox/DataScience/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 4 - Simple Linear Regression/Salary_Data.csv")
View(Salary_Data)
View(Salary_Data)
library(caTools)
set.seed(123)
split = sample.split(dataset$DependentVariable, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = ln(formula = Salary ~ YearsExperience,
data = training_set)
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
regressor
y_pred = predict(regressor,newdata=test_set)
y_pred
install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor,newdata=test_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (training set)') +
xlab('Years of experience') +
ylab('Salary')
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor,newdata=training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (training set)') +
xlab('Years of experience') +
ylab('Salary')
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor,newdata=training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (test set)') +
xlab('Years of experience') +
ylab('Salary')
dataset = read.csv("~/Dropbox/DataScience/Machine Learning A-Z Template Folder/Part 2 - Regression//Users/yaru/Dropbox/DataScience/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 5 - Multiple Linear Regression/50_Startups.csv")
dataset = read.csv("/Users/yaru/Dropbox/DataScience/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 5 - Multiple Linear Regression/50_Startups.csv")
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
View(dataset)
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
View(training_set)
regressor = lm(formula = Profit ~ .
data = training_set)
regressor = lm(formula = Profit ~ .,
data = training_set)
summary(regressor)
y_pred = predict(regressor,newdata=test_set)
y_pred
regressor = lm (formula = Profit ~ R.D.Spend+Administation+Marketing.Speed+State,
data = dataset)
summary(regressor)
regressor = lm (formula = Profit ~ R.D.Spend+Administation+Marketing.Speed,
data = dataset)
summary(regressor)
regressor = lm (formula = Profit ~ R.D.Spend+Administation+Marketing.Speed,
data = dataset)
summary(regressor)
regressor = lm (formula = Profit ~ R.D.Spend+Administation+Marketing.Speed,
data = dataset)
regressor = lm (formula = Profit ~ R.D.Spend+Administration+Marketing.Speed+State,
data = dataset)
summary(regressor)
regressor = lm (formula = Profit ~ R.D.Spend+Administration+Marketing.Speed,
data = dataset)
regressor = lm (formula = Profit ~ R.D.Spend+Administration+Marketing.Spend+State,
data = dataset)
summary(regressor)
regressor = lm (formula = Profit ~ R.D.Spend+Administration+Marketing.Spend,
data = dataset)
summary(regressor)
regressor = lm (formula = Profit ~ R.D.Spend+Marketing.Spend,
data = dataset)
summary(regressor)
regressor = lm (formula = Profit ~ R.D.Spend,
data = dataset)
summary(regressor)
source('~/.active-rstudio-document')
install.packages("nycflights13")
library(nycflights13)
dim(flights)
data = flights
#print last 5 rows of mydata
tail(data, n=5)
head(data, n=5)
str(data) # data type
filter_1 = filter(flights, month ==9| month ==10, day <2)
filter_1 = filter(flights, month ==9| month ==10, day<2)
filter_1 = filter(data, month ==9| month ==10, day<2)
filter_1 = filter(data, month ==9| month ==10, day<2)
filter_1 = filter(data, month == 9 | month == 10 & day<2)
View(data)
View(data)
filter_1 = filter(data, month == 9 | month == 10, day < 2)
filter_1 = dplyr::filter(data, month == 9 | month == 10, day < 2)
install.packages("dplyr")
library(dplyr)
filter_1 = filter(data, month == 9 | month == 10, day < 2)
filter_1
arrange(data[1:5,],dep_delay)
arrange(data[,1:8],desc(dep_delay))
select(data[1:5,],year,month,day)
select(data,~starts_with("dep_"))
select(data, starts_with("dep_"))
distinct(data,origin,dest)
mutate(data,
gain = arr_delay - dep_delay,
gain_per_hour = gain/(air_time/60))
library(dplyr)
install.packages("dplyr")
library(dplyr)
install.packages("nycflights13")
library(nycflights13)
dim(flights) # get number of rows and columns
data = flights
#print last or first 5 rows of mydata
tail(data, n=5)
head(data, n=5)
str(data) # data type
filter_1 = filter(data, month == 9 | month == 10, day < 2) # select 9/01 and 10/01 flights
arrange(data[1:5,],dep_delay) # increasing order of delay time, first 5 rows
arrange(data[,1:8],desc(dep_delay)) # decreasing order of delay time, first 8 columns
select(data[1:5,],year,month,day) # select columns by time
select(data, starts_with("dep_"))
distinct(data,origin,dest)
mutate(data,
gain = arr_delay - dep_delay,
gain_per_hour = gain/(air_time/60)) # refer to just created columns
set.seed(1111) # fix the sample, so that sample won't change everytime ues it
sample_n(data,10) # get 10 samples
sample_frac(data, 0.01) # get 1% data
delay_pipe = data %>%
filter(!is.na(dep_delay)) %>%
group_by(origin) %>%
summarise(
dis = mean(distance, na.rm = T),
delay = mean(dep_delay),
count = n() ) %>%
filter(count > 0)
delay_pipe
library(devtools)
install_github('andreacirilloac/updateR')
install_github("boxuancui/DataExplorer", ref="develop")
library(ggplot2)
ggplot(delay, aes(x = dist, y = delay)) +
geom_point(aes(color = count, size = count, x = dist, y = delay), alpha = 1/2) +
xlab("Distance") +
ylab("Delay") +
ggtitle("Distance vs. Delay") +
geom_smooth() +
scale_size_area()
by_origin = group_by(data,origin)
delay = summarise (by_origin,
count = n(),
dist = mean(distance,na.rm = T),
deley = mean(arr_delay,na.rm = T))
delay
ggplot(delay, aes(x = dist, y = delay)) +
geom_point(aes(color = count, size = count, x = dist, y = delay), alpha = 1/2) +
xlab("Distance") +
ylab("Delay") +
ggtitle("Distance vs. Delay") +
geom_smooth() +
scale_size_area()
ggplot(delay, aes(x = dist, y = delay)) +
geom_point(aes(color = count, size = count), alpha = 1/2) +
xlab("Distance") +
ylab("Delay") +
ggtitle("Distance vs. Delay") +
geom_smooth() +
scale_size_area()
install_github("ramnathv/htmlwidgets")
install_github("smartinsightsfromdata/rpivotTable")
library(rpivotTable)
rpivotTable(data, rows="origin",col="month",aggregatorName="Average",
vais="arr_delay",rendererName="Table")
library(nycflights13)
rpivotTable(flights, rows="origin",col="month",aggregatorName="Average",
vais="arr_delay",rendererName="Table")
ggplot(delay, aes(x = dist, y = delay)) +
geom_point(aes(color = count, size = count), alpha = 1/2) +
xlab("Distance") +
ylab("Delay") +
ggtitle("Distance vs. Delay") +
geom_smooth() +
scale_size_area()
ggplot(delay, aes(x = dist, y = delay)) +
geom_point(color=count, size=count, alpha = 1/2) +
xlab("Distance") +
ylab("Delay") +
ggtitle("Distance vs. Delay") +
geom_smooth() +
scale_size_area()
ggplot(delay, aes(x = dist, y = delay)) +
geom_point(aes(color=count), size=count, alpha = 1/2) +
xlab("Distance") +
ylab("Delay") +
ggtitle("Distance vs. Delay") +
geom_smooth() +
scale_size_area()
ggplot(delay, aes(x = dist, y = delay)) +
geom_point(size=count, alpha = 1/2) +
aes(color=count) +
xlab("Distance") +
ylab("Delay") +
ggtitle("Distance vs. Delay") +
geom_smooth() +
scale_size_area()
ggplot(delay, aes(x = dist, y = delay,color=count)) +
geom_point(size=count, alpha = 1/2) +
xlab("Distance") +
ylab("Delay") +
ggtitle("Distance vs. Delay") +
geom_smooth() +
scale_size_area()
ggplot(delay, aes(x = dist, y = delay)) +
geom_point(aes(color=count,size=count), alpha = 1/2,show.legend = F) +
xlab("Distance") +
ylab("Delay") +
ggtitle("Distance vs. Delay") +
geom_smooth() +
scale_size_area()
install.packages("maps")
install.packages("ggmap")
library(maps)
library(ggplot2)
library(plyr)
library(ggmap)
HT = get_map(location="Houston,Texas",zoom=14,source="osm")
ggmap(HT)
kings = scan(http://robjhyndman.com/tsdldata/misc/kings.dat', skip=3')
kings = scan('http://robjhyndman.com/tsdldata/misc/kings.dat', skip=3)
kingstimeseries = ts(kings)
kingstimeseries
plot.ts(kingstimeseries)
install.packages("tseries")
library(tseries) # ARIMA model: autoregression and moving average
kpss.test(kingstimeseries)
kingstimeseriesdiff1 = diff(kingstimeseries, differences = 1)
pss.test(kingstimeseriesdiff1)
kpss.test(kingstimeseriesdiff1)
tsdisplay(kingstimeseries,lag.max=30)
ggtsdisplay(kingstimeseries,lag.max=30)
library(ggplot2)
ggtsdisplay(kingstimeseries,lag.max=30)
install.packages("forecast")
library(forecast)
tsdisplay(kingstimeseries,lag.max=30)
model = arima(kingstimeseries,order=c(0,1,1))
model
auto.arima(kingstimeseries)
mforecast = forecast(model, h=3)
plot(mforecast)
mforecast
install.packages("sqldf")
library(sqldf)
setwd("~/Dropbox/DataScience/Machine Learning A-Z Template Folder/Part 4 - Clustering/Section 24 - K-Means Clustering")
dataset = read.csv('Data.csv')
dataset = read.csv('Mall_Customers.csv')
X = dataset[4:5]
set.seed(6)
wcss = vector()
for (i in 1:10) wcss[i] = sum(kmeans(X, i)$withinss)
plot(1:10, wcss, type='b', main=paste('Cluster of clients'), xlab='Number of clusters', ylab='WCSS')
set.seed(29)
kmeans = kmeans(X, 5, iter.max=300, nstart=10)
kmeans
library(cluster)
clusplot(X,
kmeans$cluster,
lines=0,
shade=T,
color=T,
labels=2,
plotchar=F,
span=T,
main=paste('Clusters of clients'),
xlab='Annual Income',
ylab='Spending Score')

p<-ggplot(subdata,aes(x=class,y=mean1,group=class))+
geom_errorbar(aes(ymin=UL1,ymax=LL1),width=0.1,colour="red",size=1)+
geom_point(colour="blue",shape=15,size=6)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border= element_blank())+
labs(title="Appl. Method (obs.)")+
theme(plot.title=element_text(family="Times New Roman",size=24,color="black",hjust=-0.8))+
theme(axis.text=element_text(family="Times New Roman",size=20,color="black"))+
theme(axis.title=element_text(family="Times New Roman",size=24,color="black"))+
theme(axis.ticks.y=element_blank())+
theme(plot.margin=margin(t=5,b=5,unit="mm"))+
theme(plot.margin=unit(c(5,10,5,0),"mm"))+
coord_flip()+
geom_hline(yintercept=0,lty=2)+
geom_vline(xintercept=0.4,lty=1,size=1)+
geom_vline(xintercept=3.6,lty=1,size=1)+
ylab(xlab)+
xlab(ylab)
return(p)
}
plot(subdata)
plot<-function(subdata,xlab="Effect size of yield",ylab=""){
require(ggplot2)
p<-ggplot(subdata,aes(x=class,y=mean1,group=class))+
geom_errorbar(aes(ymin=UL1,ymax=LL1),width=0.1,colour="red",size=1)+
geom_point(colour="blue",shape=15,size=6)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border= element_blank())+
labs(title="Appl. Method (obs.)")+
theme(plot.title=element_text(family="Times New Roman",size=24,color="black",hjust=-0.9))+
theme(axis.text=element_text(family="Times New Roman",size=20,color="black"))+
theme(axis.title=element_text(family="Times New Roman",size=24,color="black"))+
theme(axis.ticks.y=element_blank())+
theme(plot.margin=margin(t=5,b=5,unit="mm"))+
theme(plot.margin=unit(c(5,10,5,0),"mm"))+
coord_flip()+
geom_hline(yintercept=0,lty=2)+
geom_vline(xintercept=0.4,lty=1,size=1)+
geom_vline(xintercept=3.6,lty=1,size=1)+
ylab(xlab)+
xlab(ylab)
return(p)
}
plot(subdata)
subdata<-subset(yieldnew,Type=="Tillage")
subdata$class<-factor(subdata$class, levels=rev(subdata$class))
plot<-function(subdata,xlab="Effect size of yield",ylab=""){
require(ggplot2)
p<-ggplot(subdata,aes(x=class,y=mean1,group=class))+
geom_errorbar(aes(ymin=UL1,ymax=LL1),width=0.1,colour="red",size=1)+
geom_point(colour="blue",shape=15,size=6)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border= element_blank())+
labs(title="Tillage (obs.)")+
theme(plot.title=element_text(family="Times New Roman",size=24,color="black",hjust=-0.25))+
theme(axis.text=element_text(family="Times New Roman",size=20,color="black"))+
theme(axis.title=element_text(family="Times New Roman",size=24,color="black"))+
theme(axis.ticks.y=element_blank())+
theme(plot.margin=margin(t=5,b=5,unit="mm"))+
theme(plot.margin=unit(c(5,10,5,0),"mm"))+
coord_flip()+
geom_hline(yintercept=0,lty=2)+
geom_vline(xintercept=0.4,lty=1,size=1)+
geom_vline(xintercept=3.6,lty=1,size=1)+
ylab(xlab)+
xlab(ylab)
return(p)
}
plot(subdata)
subdata<-subset(yieldnew,Type=="Soil")
subdata$class<-factor(subdata$class, levels=rev(subdata$class))
plot<-function(subdata,xlab="Effect size of yield",ylab=""){
require(ggplot2)
p<-ggplot(subdata,aes(x=class,y=mean1,group=class))+
geom_errorbar(aes(ymin=UL1,ymax=LL1),width=0.1,colour="red",size=1)+
geom_point(colour="blue",shape=15,size=6)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border= element_blank())+
labs(title="Soil Texture (obs.)")+
theme(plot.title=element_text(family="Times New Roman",size=24,color="black",hjust=-0.65))+
theme(axis.text=element_text(family="Times New Roman",size=20,color="black"))+
theme(axis.title=element_text(family="Times New Roman",size=24,color="black"))+
theme(axis.ticks.y=element_blank())+
theme(plot.margin=margin(t=5,b=5,unit="mm"))+
theme(plot.margin=unit(c(5,10,5,0),"mm"))+
coord_flip()+
geom_hline(yintercept=0,lty=2)+
geom_vline(xintercept=0.4,lty=1,size=1)+
geom_vline(xintercept=7.6,lty=1,size=1)+
ylab(xlab)+
xlab(ylab)
return(p)
}
plot(subdata)
plot<-function(subdata,xlab="Effect size of yield",ylab=""){
require(ggplot2)
p<-ggplot(subdata,aes(x=class,y=mean1,group=class))+
geom_errorbar(aes(ymin=UL1,ymax=LL1),width=0.1,colour="red",size=1)+
geom_point(colour="blue",shape=15,size=6)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border= element_blank())+
labs(title="Soil Texture (obs.)")+
theme(plot.title=element_text(family="Times New Roman",size=24,color="black",hjust=-0.85))+
theme(axis.text=element_text(family="Times New Roman",size=20,color="black"))+
theme(axis.title=element_text(family="Times New Roman",size=24,color="black"))+
theme(axis.ticks.y=element_blank())+
theme(plot.margin=margin(t=5,b=5,unit="mm"))+
theme(plot.margin=unit(c(5,10,5,0),"mm"))+
coord_flip()+
geom_hline(yintercept=0,lty=2)+
geom_vline(xintercept=0.4,lty=1,size=1)+
geom_vline(xintercept=7.6,lty=1,size=1)+
ylab(xlab)+
xlab(ylab)
return(p)
}
plot(subdata)
subdata<-subset(yieldnew,Type=="Plant")
subdata$class<-factor(subdata$class, levels=rev(subdata$class))
plot<-function(subdata,xlab="Effect size of yield",ylab=""){
require(ggplot2)
p<-ggplot(subdata,aes(x=class,y=mean1,group=class))+
geom_errorbar(aes(ymin=UL1,ymax=LL1),width=0.1,colour="red",size=1)+
geom_point(colour="blue",shape=15,size=6)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border= element_blank())+
labs(title="Crop Type (obs.)")+
theme(plot.title=element_text(family="Times New Roman",size=24,color="black",hjust=-0.65))+
theme(axis.text=element_text(family="Times New Roman",size=20,color="black"))+
theme(axis.title=element_text(family="Times New Roman",size=24,color="black"))+
theme(axis.ticks.y=element_blank())+
theme(plot.margin=margin(t=5,b=5,unit="mm"))+
theme(plot.margin=unit(c(5,10,5,0),"mm"))+
coord_flip()+
geom_hline(yintercept=0,lty=2)+
geom_vline(xintercept=0.4,lty=1,size=1)+
geom_vline(xintercept=10.6,lty=1,size=1)+
ylab(xlab)+
xlab(ylab)
return(p)
}
plot(subdata)
plot<-function(subdata,xlab="Effect size of yield",ylab=""){
require(ggplot2)
p<-ggplot(subdata,aes(x=class,y=mean1,group=class))+
geom_errorbar(aes(ymin=UL1,ymax=LL1),width=0.1,colour="red",size=1)+
geom_point(colour="blue",shape=15,size=6)+
theme_bw()+
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
panel.border= element_blank())+
labs(title="Crop Type (obs.)")+
theme(plot.title=element_text(family="Times New Roman",size=24,color="black",hjust=-0.95))+
theme(axis.text=element_text(family="Times New Roman",size=20,color="black"))+
theme(axis.title=element_text(family="Times New Roman",size=24,color="black"))+
theme(axis.ticks.y=element_blank())+
theme(plot.margin=margin(t=5,b=5,unit="mm"))+
theme(plot.margin=unit(c(5,10,5,0),"mm"))+
coord_flip()+
geom_hline(yintercept=0,lty=2)+
geom_vline(xintercept=0.4,lty=1,size=1)+
geom_vline(xintercept=10.6,lty=1,size=1)+
ylab(xlab)+
xlab(ylab)
return(p)
}
plot(subdata)
library(metafor)
library(ggplot2)
library(extrafont)
font_import()
fonts()
yield<-read.csv("/Volumes/Untitled/meta analysis/yield/analysis for article/yield.csv",header=T)
#moderator analysis for soil texture#
yieldtext<-yield[yield$Texture!="",]
metatexture<-rma(data=yieldtext,yi=ES,vi=Var,mods=~factor(Texture)-1)
metatexture
#moderator analysis for soil pH (not good,use regression result)#
yieldph<-yield[yield$pH!="",]
metaph<-rma(data=yieldph,yi=ES,vi=Var,mods=~factor(pH)-1)
metaph
#moderator analysis for crop #
yieldcrop<-yield[yield$Crop!="",]
metacrop<-rma(data=yieldcrop,yi=ES,vi=Var,mods=~factor(Crop)-1)
metacrop
#moderator analysis for tillage #
yieldtill<-yield[yield$Tillage!="",]
metatillage<-rma(data=yieldtill,yi=ES,vi=Var,mods=~factor(Tillage)-1)
metatillage
#moderator analysis for PL application time #
yieldtime<-yield[yield$Time!="",]
metatime<-rma(data=yieldtime,yi=ES,vi=Var,mods=~factor(Time)-1)
metatime
yieldtime1<-yieldtime[yieldtime$Time!="residual",]
yieldtime2<-yieldtime1[yieldtime1$Time!="AS",]
metatimenew<-rma(data=yieldtime2,yi=ES,vi=Var,mods=~factor(Time)-1)
metatimenew
#moderator analysis for PL application method #
yieldmeth<-yield[yield$Method!="",]
metamethod<-rma(data=yieldmeth,yi=ES,vi=Var,mods=~factor(Method)-1)
metamethod
dataset = read.csv(/Users/yaru/Dropbox/DataScience/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing)
dataset = read.csv('/Users/yaru/Dropbox/DataScience/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing')
dataset = read.csv('/Users/yaru/Dropbox/DataScience/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Data.csv')
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, Fun = function(x)mean(x,na.rm=TRUE)),
dataset$Age)
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, Fun = function(x) mean(x,na.rm=TRUE)),
dataset$Age)
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, Fun = function(x) mean(x, na.rm=TRUE)),
dataset$Age)
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm=TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm=TRUE)),
dataset$Salary)
View(dataset)
dataset$Country = factor(dataset$Country,
levels = c('France','Spain','Germany'),
labels = c(1,2,3))
View(dataset)
View(dataset)
dataset$Purchased = factor(dataset$Purchased,
levels = c('No','Yes'),
labels = c(0,1))
View(dataset)
View(dataset)
install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased,SplitRatio = 0.8)
split
training_set = subset(dataset,split==TRUE)
test_set = subset(dataset,split==FALSE)
View(test_set)
View(test_set)
View(training_set)
traning_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
training_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
View(test_set)
View(test_set)
View(training_set)
View(training_set)
dataset = read.csv('Salary_Date.csv')
dataset = read.csv('/Users/yaru/Dropbox/DataScience/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 4 - Simple Linear Regression/Salary_Date.csv')
library(readr)
Salary_Data <- read_csv("~/Dropbox/DataScience/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 4 - Simple Linear Regression/Salary_Data.csv")
View(Salary_Data)
dataset = read.csv("~/Dropbox/DataScience/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 4 - Simple Linear Regression/Salary_Data.csv")
View(Salary_Data)
View(Salary_Data)
library(caTools)
set.seed(123)
split = sample.split(dataset$DependentVariable, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = ln(formula = Salary ~ YearsExperience,
data = training_set)
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
regressor
y_pred = predict(regressor,newdata=test_set)
y_pred
install.packages('ggplot2')
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor,newdata=test_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (training set)') +
xlab('Years of experience') +
ylab('Salary')
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor,newdata=training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (training set)') +
xlab('Years of experience') +
ylab('Salary')
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor,newdata=training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (test set)') +
xlab('Years of experience') +
ylab('Salary')
dataset = read.csv("~/Dropbox/DataScience/Machine Learning A-Z Template Folder/Part 2 - Regression//Users/yaru/Dropbox/DataScience/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 5 - Multiple Linear Regression/50_Startups.csv")
dataset = read.csv("/Users/yaru/Dropbox/DataScience/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 5 - Multiple Linear Regression/50_Startups.csv")
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
View(dataset)
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
View(training_set)
regressor = lm(formula = Profit ~ .
data = training_set)
regressor = lm(formula = Profit ~ .,
data = training_set)
summary(regressor)
y_pred = predict(regressor,newdata=test_set)
y_pred
regressor = lm (formula = Profit ~ R.D.Spend+Administation+Marketing.Speed+State,
data = dataset)
summary(regressor)
regressor = lm (formula = Profit ~ R.D.Spend+Administation+Marketing.Speed,
data = dataset)
summary(regressor)
regressor = lm (formula = Profit ~ R.D.Spend+Administation+Marketing.Speed,
data = dataset)
summary(regressor)
regressor = lm (formula = Profit ~ R.D.Spend+Administation+Marketing.Speed,
data = dataset)
regressor = lm (formula = Profit ~ R.D.Spend+Administration+Marketing.Speed+State,
data = dataset)
summary(regressor)
regressor = lm (formula = Profit ~ R.D.Spend+Administration+Marketing.Speed,
data = dataset)
regressor = lm (formula = Profit ~ R.D.Spend+Administration+Marketing.Spend+State,
data = dataset)
summary(regressor)
regressor = lm (formula = Profit ~ R.D.Spend+Administration+Marketing.Spend,
data = dataset)
summary(regressor)
regressor = lm (formula = Profit ~ R.D.Spend+Marketing.Spend,
data = dataset)
summary(regressor)
regressor = lm (formula = Profit ~ R.D.Spend,
data = dataset)
summary(regressor)
setwd("~/Dropbox/DataScience/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 18 - Naive Bayes")
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting Naive Bayes to the Training set
library(e1071)
classifier = naiveBayes(x = training_set[-3],
y = training_set$Purchased)
y_pred = predict(classifier, newdata = test_set[-3])
y_pred
cm = table(test_set[, 3], y_pred)
cm
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Naive Bayes (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3], main = 'Naive Bayes (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
setwd("~/Dropbox/DataScience/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 19 - Decision Tree Classification")
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
library(rpart)
classifier = rpart(formula = Purchased ~ .,
data = training_set)
y_pred = predict(classifier, newdata = test_set[-3])
View(y_pred)
View(y_pred)
y_pred = predict(classifier, newdata = test_set[-3], type = 'class')
y_pred
cm = table(test_set[, 3], y_pred)
cm
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Decision Tree (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set, type = 'class')
plot(set[, -3],
main = 'Decision Tree (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set, ytpe = 'class')
plot(set[, -3], main = 'Decision Tree (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set, type = 'class')
plot(set[, -3], main = 'Decision Tree (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
plot(classifier)
text(classifier)
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
# Fitting Decision Tree to the Training set
library(rpart)
classifier = rpart(formula = Purchased ~ .,
data = training_set)
plot(classifier)
text(classifier)
